# Setup, lambda = 19.5
set.seed(4666);
sample <- rexp(1079, rate = 19.5);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[1079]]);
# Getting the amount of events per second; events ~ Poi(19.5)
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(events);
expected <- 19.5; # Expected value of a Poisson distribution is lambda
# Calculating the answer
ans <- abs(mean - expected);
print(ans)
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, rate = 7.5);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[2072]]);
# Getting the amount of events per second; events ~ Poi(7.5)
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(events);
expected <- 7.5; # Expected value of a Poisson distribution is lambda
# Calculating the answer
ans <- abs(mean - expected);
print(ans)
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, rate = 1/7.5);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[2072]]);
# Getting the amount of events per second; events ~ Poi(7.5)
intervals <- 1:T
counts <- tabulate(findInterval(s, intervals))
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(counts);
expected <- 2072 * (1 - exp(-7.5)); # Expected value of a Poisson distribution is lambda
# Calculating the answer
ans <- abs(mean - expected);
rounded <- round(ans, 4)
print(rounded)
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, rate = 1/7.5);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[2072]]);
# Getting the amount of events per second; events ~ Poi(7.5)
intervals <- 1:T
counts <- tabulate(findInterval(time, intervals))
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(counts);
expected <- 2072 * (1 - exp(-7.5)); # Expected value of a Poisson distribution is lambda
# Calculating the answer
ans <- abs(mean - expected);
rounded <- round(ans, 4)
print(rounded)
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, rate = 7.5);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[2072]]);
# Getting the amount of events per second; events ~ Poi(7.5)
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(events);
expected <- 7.5; # Expected value of a Poisson distribution is lambda
# Calculating the answer
ans <- abs(mean - expected);
print(ans)
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, rate = 7.5);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[2072]]);
# Getting the amount of events per second; events ~ Poi(7.5)
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(events);
expected <- 7.5; # Expected value of a Poisson distribution is lambda
# Calculating the answer
ans <- abs(mean - expected);
print(ans)
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, rate = 1/7.5);
sample <- rexp(2072, rate = 7.5);
?rexp
sample <- rexp(2072, 7.5);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[2072]]);
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, 7.5);
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, 7.5);
sample <- rexp(2072, 1/7.5);
sample <- rexp(2072, 7.5);
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, 7.5);
?cumsum
?ceiling
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[2072]]);
# Getting the amount of events per second; events ~ Poi(7.5)
intervals <- 1:T
?tabulate
?findInterval
counts <- tabulate(findInterval(time, intervals))
?rep
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
ceiling(0.421)
# Setup, lambda = 7.5
set.seed(4267);
sample <- rexp(2072, 7.5);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[2072]]);
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the amount of events per second; events ~ Poi(7.5)
intervals <- 1:T
counts <- tabulate(findInterval(time, intervals))
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(events);
?exp
# Setup,
lambda <- 7.5
size <- 2072
set.seed(4267);
sample <- rexp(size, lambda);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[size]]);
# Getting the amount of events per second; events ~ Poi(lambda)
intervals <- 1:T
counts <- tabulate(findInterval(time, intervals))
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(events);
expected <- size * (1/lambda); # E of Exponential is 1/lambda
expected <- (1/lambda); # Expected Val of Exponential is 1/lambda
# Calculating the answer
ans <- abs(mean - expected);
rounded <- round(ans, 4)
# Getting the expected values and the mean
mean <- mean(events);
expected <- (1/lambda); # Expected Val of Exponential is 1/lambda
# Calculating the answer
ans <- abs(mean - expected);
ans <- round(ans, 4)
print(rounded)
# Setup,
lambda <- 7.5
size <- 2072
set.seed(4267);
sample <- rexp(size, lambda);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[size]]);
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(events);
expected <- (1/lambda); # Expected Val of Exponential is 1/lambda
# Calculating the answer
ans <- abs(mean - expected);
ans <- round(ans, 4)
print(rounded)
# Setup,
lambda <- 7.5
size <- 2072
set.seed(4267);
sample <- rexp(size, lambda);
# Calculating constants
time <- cumsum(sample);
T <- ceiling(time[[size]]);
events <- rep(0, T);
for (t in time) events[[ceiling(t)]] <- events[[ceiling(t)]] + 1
# Getting the expected values and the mean
mean <- mean(events);
expected <- (1/lambda); # Expected Val of Exponential is 1/lambda
# Calculating the answer
ans <- abs(mean - expected);
ans <- round(ans, 4)
print(ans)
